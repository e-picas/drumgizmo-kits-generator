# DrumGizmo Kit Generator - Cascade Configuration

## Project Description
The DrumGizmo Kit Generator is a Python tool that generates kits for DrumGizmo from audio samples. It creates complete kits with velocity variations, MIDI mappings, and custom audio channel configurations.

## Project Structure
- `drumgizmo_kits_generator/` - Main module
  - `main.py` - Main entry point, contains the `main()` function
  - `config.py` - Configuration management (channels, default values)
  - `audio.py` - Audio file processing (conversion, copying)
  - `utils.py` - Utility functions (getting sample rate)
  - `xml_generator.py` - XML file generation for DrumGizmo
- `tests/` - Unit and integration tests
  - `test_config.py` - Tests for the config module
  - `test_audio.py` - Tests for the audio module
  - `test_main.py` - Tests for the main module
  - `test_xml_generator.py` - Tests for the xml_generator module
  - `mocks/` - Configuration files for testing
  - `sources/` - Audio files and other resources for testing
  - `target/` - Verification kit generated from `sources/` for testing

## Main Features
1. DrumGizmo kit generation from audio samples
2. Creation of velocity variations for each instrument
3. Generation of XML files for DrumGizmo (drumkit.xml, midimap.xml, etc.)
4. Automatic sample rate conversion
5. Customization of audio channels and main channels
6. Validation of MIDI and velocity configurations

## Recent Changes
1. Removal of the "instrument_prefix" variable from the code
2. Addition of automatic sample rate conversion using SoX
3. Improved handling of custom audio channels
4. Validation of MIDI and velocity values
5. Enhanced robustness against invalid inputs

## Dependencies
- Python 3.9+ (for modern Python features)
- SoX (for sample rate conversion)

## Tests
- Code coverage: 91% for the entire project
- Coverage by module:
  - audio.py: 94%
  - config.py: 94%
  - main.py: 88%
  - xml_generator.py: 100%
  - utils.py: 88%
- Running tests: `python3 -m unittest discover`

## Areas for Improvement
1. Better error handling in audio processing functions
2. Additional tests for edge cases and invalid inputs
3. Refactoring of the main.py module to reduce complexity
4. Improved code documentation
5. Additional features for further kit customization

## Important Notes
- Channel values can contain spaces or be numbers
- The `update_channels_config` function handles non-string values by converting them to strings
- Tests use 4 velocity levels by default, as per the configuration in drumgizmo-kit.ini
- All code, comments, documentation, and commit messages should be written in English
